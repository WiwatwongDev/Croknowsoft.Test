// src/app/components/Question5.tsx

'use client'

import { useState } from 'react'
import QuestionLayout from './QuestionLayout'
import { 
  CalculatorIcon, 
  CodeBracketIcon, 
  EyeIcon, 
  LinkIcon,
  PlusIcon,
  TrashIcon,
  DocumentArrowDownIcon,
  TableCellsIcon,
  LightBulbIcon,
  DocumentIcon
} from '@heroicons/react/24/outline'

interface Question5Props {
  onBack?: () => void
  onHome?: () => void
}

interface CalculatorItem {
  id: number
  amount: number
}

export default function Question5({ onBack, onHome }: Question5Props) {
  const [submissionType, setSubmissionType] = useState<'demo' | 'code' | 'github'>('demo')
  const [sourceCode, setSourceCode] = useState('')
  const [githubUrl, setGithubUrl] = useState('')
  const [description, setDescription] = useState('')
  
  // Calculator State
  const [items, setItems] = useState<CalculatorItem[]>([
    { id: 1, amount: 1000.00 },
    { id: 2, amount: 500.00 },
    { id: 3, amount: 20.00 },
    { id: 4, amount: 30.02 }
  ])
  const [nextId, setNextId] = useState(5)
  const [newAmount, setNewAmount] = useState('')

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const total = items.reduce((sum, item) => sum + item.amount, 0)

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const addItem = () => {
    if (newAmount && !isNaN(Number(newAmount)) && parseFloat(newAmount) > 0) {
      setItems([...items, { 
        id: nextId, 
        amount: parseFloat(newAmount) 
      }])
      setNextId(nextId + 1)
      setNewAmount('')
    }
  }

  // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const deleteItem = (id: number) => {
    setItems(items.filter(item => item.id !== id))
  }

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF
  const exportToPdf = () => {
    alert('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)')
  }

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel
  const exportToExcel = () => {
    alert('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)')
  }

  // Handle Enter key
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      addItem()
    }
  }

  const handleBack = () => {
    if (onBack) onBack()
    else console.log('Go back to previous page')
  }

  const handleHome = () => {
    if (onHome) onHome()
    else console.log('Go back to home page')
  }

  return (
    <QuestionLayout
      questionNumber={5}
      title="Calculator Application"
      onBack={handleBack}
      onHome={handleHome}
    >
      <div className="space-y-8">
        {/* Question Description */}
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-red-900 mb-3">‡πÇ‡∏à‡∏ó‡∏¢‡πå</h3>
          <p className="text-red-800 leading-relaxed">
            ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ 
            (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô source code ‡∏´‡∏£‡∏∑‡∏≠ GitHub ‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database)
          </p>
        </div>

        {/* Answer Summary */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-green-900 mb-3">üéØ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</h3>
          <p className="text-green-800 leading-relaxed">
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡πâ‡∏ß‡∏¢ Next.js ‡πÅ‡∏•‡∏∞ Tailwind CSS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </p>
        </div>

        {/* Submission Type Selection */}
        <div className="bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200 rounded-lg p-8 shadow-sm">
          <h3 className="text-xl font-bold text-gray-900 mb-6 flex items-center">
            <DocumentIcon className="w-6 h-6 mr-2 text-blue-600" />
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <button
              onClick={() => setSubmissionType('demo')}
              className={`group p-6 rounded-xl border-2 transition-all duration-300 hover:shadow-lg ${
                submissionType === 'demo'
                  ? 'border-green-500 bg-green-50 text-green-700 shadow-md'
                  : 'border-gray-300 hover:border-gray-400 bg-white'
              }`}
            >
              <div className="flex flex-col items-center">
                <div className={`p-3 rounded-full mb-4 ${
                  submissionType === 'demo' ? 'bg-green-100' : 'bg-gray-100 group-hover:bg-gray-200'
                }`}>
                  <EyeIcon className="w-10 h-10" />
                </div>
                <div className="font-bold text-lg mb-2">Live Demo</div>
                <div className="text-sm text-gray-600">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°</div>
              </div>
            </button>
            
            <button
              onClick={() => setSubmissionType('code')}
              className={`group p-6 rounded-xl border-2 transition-all duration-300 hover:shadow-lg ${
                submissionType === 'code'
                  ? 'border-blue-500 bg-blue-50 text-blue-700 shadow-md'
                  : 'border-gray-300 hover:border-gray-400 bg-white'
                }`}
            >
              <div className="flex flex-col items-center">
                <div className={`p-3 rounded-full mb-4 ${
                  submissionType === 'code' ? 'bg-blue-100' : 'bg-gray-100 group-hover:bg-gray-200'
                }`}>
                  <CodeBracketIcon className="w-10 h-10" />
                </div>
                <div className="font-bold text-lg mb-2">Source Code</div>
                <div className="text-sm text-gray-600">‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              </div>
            </button>
          </div>
        </div>

        {/* Live Demo */}
        {submissionType === 'demo' && (
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <CalculatorIcon className="w-5 h-5 mr-2" />
              ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á)
            </h3>
            
            {/* Calculator App */}
            <div className="max-w-md mx-auto bg-white rounded-lg shadow-xl overflow-hidden border-2 border-gray-300">
              
              {/* Header */}
              <div className="bg-blue-500 text-white p-4">
                <div className="flex items-center justify-between">
                  <h1 className="text-lg font-semibold">‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</h1>
                  <span className="bg-blue-400 px-3 py-1 rounded text-sm font-medium">
                    {items.length}
                  </span>
                </div>
              </div>

              {/* Content */}
              <div className="p-4">
                {/* Table Header */}
                <div className="grid grid-cols-3 gap-4 mb-3 text-sm font-medium text-gray-600 border-b border-gray-200 pb-2">
                  <div>‡∏•‡∏≥‡∏î‡∏±‡∏ö</div>
                  <div>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</div>
                  <div className="text-center">‡∏•‡∏ö</div>
                </div>

                {/* Items List */}
                <div className="space-y-2 mb-4 max-h-48 overflow-y-auto">
                  {items.map((item, index) => (
                    <div key={item.id} className="grid grid-cols-3 gap-4 items-center py-2 border-b border-gray-100 hover:bg-gray-50 transition-colors">
                      <div className="text-sm font-medium text-gray-700">{index + 1}</div>
                      <div className="text-sm font-bold text-gray-900">{item.amount.toFixed(2)}</div>
                      <div className="text-center">
                        <button
                          onClick={() => deleteItem(item.id)}
                          className="text-red-500 hover:text-red-700 hover:bg-red-50 p-1 rounded transition-colors"
                          title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                        >
                          <TrashIcon className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                  
                  {items.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <CalculatorIcon className="w-12 h-12 mx-auto mb-2 opacity-50" />
                      <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                    </div>
                  )}
                </div>

                {/* Add New Item */}
                <div className="flex gap-2 mb-4">
                  <input
                    type="number"
                    step="0.01"
                    placeholder="‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"
                    value={newAmount}
                    onChange={(e) => setNewAmount(e.target.value)}
                    onKeyPress={handleKeyPress}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                  <button
                    onClick={addItem}
                    disabled={!newAmount || isNaN(Number(newAmount)) || parseFloat(newAmount) <= 0}
                    className="bg-green-500 hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white px-4 py-2 rounded-md font-medium transition-colors flex items-center space-x-1"
                  >
                    <PlusIcon className="w-4 h-4" />
                    <span>‡πÄ‡∏û‡∏¥‡πà‡∏°</span>
                  </button>
                </div>

                {/* Total */}
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg mb-4 border border-blue-200">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-gray-700">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                    <span className="text-2xl font-bold text-blue-600">
                      {total.toLocaleString('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                    </span>
                  </div>
                </div>

                {/* Export Buttons */}
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={exportToPdf}
                    className="flex items-center justify-center space-x-2 bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-md font-medium transition-colors"
                  >
                    <DocumentArrowDownIcon className="w-4 h-4" />
                    <span>Export PDF</span>
                  </button>
                  <button
                    onClick={exportToExcel}
                    className="flex items-center justify-center space-x-2 bg-green-500 hover:bg-green-600 text-white py-3 px-4 rounded-md font-medium transition-colors"
                  >
                    <TableCellsIcon className="w-4 h-4" />
                    <span>Export Excel</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Features List */}
            <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold text-blue-900 mb-3">‚ú® ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
                <div className="space-y-1">
                  <div>‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ</div>
                  <div>‚úì ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</div>
                  <div>‚úì ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</div>
                  <div>‚úì Validation ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î</div>
                </div>
                <div className="space-y-1">
                  <div>‚úì ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
                  <div>‚úì Responsive Design</div>
                  <div>‚úì Export PDF/Excel (Placeholder)</div>
                  <div>‚úì UI/UX ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢</div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Source Code */}
        {submissionType === 'code' && (
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <CodeBracketIcon className="w-5 h-5 mr-2" />
              Complete Source Code
            </h3>
            
            <div className="space-y-6">
              {/* Main Component */}
              <div>
                <h4 className="font-medium text-gray-800 mb-2">üìÑ pages/index.js (Main Calculator)</h4>
                <div className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
                  <pre className="text-sm"><code>{`import { useState } from 'react';
import Head from 'next/head';

export default function Home() {
  const [items, setItems] = useState([
    { id: 1, amount: 1000.00 },
    { id: 2, amount: 500.00 },
    { id: 3, amount: 20.00 },
    { id: 4, amount: 30.02 }
  ]);
  const [nextId, setNextId] = useState(5);
  const [newAmount, setNewAmount] = useState('');

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const total = items.reduce((sum, item) => sum + item.amount, 0);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const addItem = () => {
    if (newAmount && !isNaN(newAmount) && parseFloat(newAmount) > 0) {
      setItems([...items, { 
        id: nextId, 
        amount: parseFloat(newAmount) 
      }]);
      setNextId(nextId + 1);
      setNewAmount('');
    }
  };

  // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const deleteItem = (id) => {
    setItems(items.filter(item => item.id !== id));
  };

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF
  const exportToPdf = () => {
    alert('Export PDF (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á jsPDF library)');
  };

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel
  const exportToExcel = () => {
    alert('Export Excel (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á xlsx library)');
  };

  return (
    <>
      <Head>
        <title>Simple Calculator</title>
        <meta name="description" content="Calculator app with Next.js" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-md mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
          
          {/* Header */}
          <div className="bg-blue-500 text-white p-4">
            <div className="flex items-center justify-between">
              <h1 className="text-lg font-semibold">‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</h1>
              <span className="bg-blue-400 px-2 py-1 rounded text-sm">
                {items.length}
              </span>
            </div>
          </div>

          {/* Content */}
          <div className="p-4">
            {/* Table Header */}
            <div className="grid grid-cols-3 gap-4 mb-2 text-sm font-medium text-gray-600">
              <div>‡∏•‡∏≥‡∏î‡∏±‡∏ö</div>
              <div>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</div>
              <div>‡∏•‡∏ö</div>
            </div>

            {/* Items List */}
            <div className="space-y-2 mb-4">
              {items.map((item, index) => (
                <div key={item.id} className="grid grid-cols-3 gap-4 items-center py-2 border-b border-gray-100">
                  <div className="text-sm">{index + 1}</div>
                  <div className="text-sm font-medium">{item.amount.toFixed(2)}</div>
                  <button
                    onClick={() => deleteItem(item.id)}
                    className="text-red-500 hover:text-red-700 text-sm"
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                </div>
              ))}
            </div>

            {/* Add New Item */}
            <div className="flex gap-2 mb-4">
              <input
                type="number"
                step="0.01"
                placeholder="‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"
                value={newAmount}
                onChange={(e) => setNewAmount(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
              />
              <button
                onClick={addItem}
                className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md font-medium transition-colors"
              >
                ‡πÄ‡∏û‡∏¥‡πà‡∏°
              </button>
            </div>

            {/* Total */}
            <div className="bg-blue-50 p-3 rounded-md mb-4">
              <div className="flex justify-between items-center">
                <span className="font-medium text-gray-700">‡∏£‡∏ß‡∏°</span>
                <span className="text-lg font-bold text-blue-600">
                  {total.toFixed(2)}
                </span>
              </div>
            </div>

            {/* Export Buttons */}
            <div className="flex gap-2">
              <button
                onClick={exportToPdf}
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md font-medium transition-colors"
              >
                Export to PDF
              </button>
              <button
                onClick={exportToExcel}
                className="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md font-medium transition-colors"
              >
                Export to Excel
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}`}</code></pre>
                </div>
              </div>

              {/* Configuration Files */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">‚öôÔ∏è package.json</h4>
                  <div className="bg-gray-900 text-gray-100 p-3 rounded-lg overflow-x-auto">
                    <pre className="text-xs"><code>{`{
  "name": "simple-calculator",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "autoprefixer": "^10",
    "eslint": "^8",
    "eslint-config-next": "14.0.0",
    "postcss": "^8",
    "tailwindcss": "^3"
  }
}`}</code></pre>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-800 mb-2">üé® tailwind.config.js</h4>
                  <div className="bg-gray-900 text-gray-100 p-3 rounded-lg overflow-x-auto">
                    <pre className="text-xs"><code>{`module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
    './app/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`}</code></pre>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Tips */}
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h4 className="font-semibold text-yellow-800 mb-2 flex items-center">
            <LightBulbIcon className="w-5 h-5 mr-2" />
            üí° ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-yellow-700 text-sm">
            <div className="space-y-1">
              <div>‚Ä¢ <strong>State Management:</strong> ‡πÉ‡∏ä‡πâ useState ‡πÄ‡∏Å‡πá‡∏ö array ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</div>
              <div>‚Ä¢ <strong>Input Validation:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isNaN() ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö</div>
              <div>‚Ä¢ <strong>Array Methods:</strong> ‡πÉ‡∏ä‡πâ reduce() ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</div>
              <div>‚Ä¢ <strong>Event Handling:</strong> onClick ‡πÅ‡∏•‡∏∞ onKeyPress</div>
            </div>
            <div className="space-y-1">
              <div>‚Ä¢ <strong>Responsive Design:</strong> Tailwind CSS Grid System</div>
              <div>‚Ä¢ <strong>User Experience:</strong> Loading states ‡πÅ‡∏•‡∏∞ feedback</div>
              <div>‚Ä¢ <strong>Code Organization:</strong> ‡πÅ‡∏¢‡∏Å functions ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</div>
              <div>‚Ä¢ <strong>Error Prevention:</strong> Disable button ‡πÄ‡∏°‡∏∑‡πà‡∏≠ input ‡∏ú‡∏¥‡∏î</div>
            </div>
          </div>
        </div>

        {/* Requirements Checklist */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">üìã ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥</h3>
          <div className="text-blue-800 space-y-2">
            <p className="font-medium">‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢:</p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <ul className="space-y-2">
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</span>
                </li>
              </ul>
              <ul className="space-y-2">
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>UI ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Export (PDF/Excel)</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span className="text-green-600">‚úÖ</span>
                  <span>Responsive Design</span>
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* Technical Implementation */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">üîß ‡∏Å‡∏≤‡∏£ Implementation</h3>
          
          <div className="space-y-4">
            {/* Architecture */}
            <div>
              <h4 className="font-medium text-gray-800 mb-2">üèóÔ∏è Architecture Pattern</h4>
              <div className="bg-white border border-gray-300 rounded p-3 text-sm text-gray-700">
                <strong>Component-Based Architecture:</strong> ‡πÉ‡∏ä‡πâ React Components ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° responsibility
                <ul className="mt-2 space-y-1 ml-4">
                  <li>‚Ä¢ <strong>State Management:</strong> useState hooks ‡πÄ‡∏Å‡πá‡∏ö application state</li>
                  <li>‚Ä¢ <strong>Event Handlers:</strong> ‡πÅ‡∏¢‡∏Å functions ‡∏ï‡∏≤‡∏° action</li>
                  <li>‚Ä¢ <strong>UI Components:</strong> ‡πÅ‡∏¢‡∏Å presentation logic</li>
                  <li>‚Ä¢ <strong>Data Flow:</strong> One-way data binding</li>
                </ul>
              </div>
            </div>

            {/* Data Structure */}
            <div>
              <h4 className="font-medium text-gray-800 mb-2">üìä Data Structure</h4>
              <div className="bg-white border border-gray-300 rounded p-3">
                <div className="bg-gray-900 text-green-400 p-2 rounded font-mono text-sm">
                  <div>interface CalculatorItem {`{`}</div>
                  <div className="ml-4">id: number,</div>
                  <div className="ml-4">amount: number</div>
                  <div>{`}`}</div>
                  <div className="mt-2">const [items, setItems] = useState&lt;CalculatorItem[]&gt;([...])</div>
                </div>
              </div>
            </div>

            {/* Key Functions */}
            <div>
              <h4 className="font-medium text-gray-800 mb-2">‚öôÔ∏è Key Functions</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-white border border-gray-300 rounded p-3">
                  <h5 className="font-medium text-gray-700 mb-2">üìù CRUD Operations</h5>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ <code>addItem()</code> - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà</li>
                    <li>‚Ä¢ <code>deleteItem(id)</code> - ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç</li>
                    <li>‚Ä¢ <code>total</code> - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</li>
                    <li>‚Ä¢ Input validation - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                  </ul>
                </div>
                <div className="bg-white border border-gray-300 rounded p-3">
                  <h5 className="font-medium text-gray-700 mb-2">üì§ Export Features</h5>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ <code>exportToPdf()</code> - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF</li>
                    <li>‚Ä¢ <code>exportToExcel()</code> - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel</li>
                    <li>‚Ä¢ Future: Chart generation</li>
                    <li>‚Ä¢ Future: Data analytics</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Summary */}
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-orange-900 mb-4">üìù ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</h3>
          <div className="text-orange-800 space-y-3">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-white p-4 rounded-lg border border-orange-200">
                <h4 className="font-semibold text-blue-600 mb-2">üéØ ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h4>
                <p className="text-sm">‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
              </div>
              <div className="bg-white p-4 rounded-lg border border-orange-200">
                <h4 className="font-semibold text-green-600 mb-2">üõ†Ô∏è ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ</h4>
                <p className="text-sm">Next.js, React, Tailwind CSS ‡∏û‡∏£‡πâ‡∏≠‡∏° TypeScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö type safety</p>
              </div>
              <div className="bg-white p-4 rounded-lg border border-orange-200">
                <h4 className="font-semibold text-purple-600 mb-2">üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°</h4>
                <p className="text-sm">‡∏û‡∏£‡πâ‡∏≠‡∏° deploy ‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï</p>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg border border-orange-200 mt-4">
              <h4 className="font-semibold text-gray-800 mb-2">üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï</h4>
              <p className="text-sm text-gray-700">
                ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database, ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•, 
                ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏õ‡πá‡∏ô PWA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
              </p>
            </div>
          </div>
        </div>

        {/* Performance & Best Practices */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h4 className="font-semibold text-green-800 mb-2">‚ö° Performance & Best Practices</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-green-700 text-sm">
            <div className="space-y-1">
              <div>‚Ä¢ <strong>React Optimization:</strong> useMemo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö total calculation</div>
              <div>‚Ä¢ <strong>Event Handling:</strong> debounce ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input validation</div>
              <div>‚Ä¢ <strong>Memory Management:</strong> cleanup ‡πÉ‡∏ô useEffect</div>
              <div>‚Ä¢ <strong>Bundle Size:</strong> tree shaking ‡πÅ‡∏•‡∏∞ code splitting</div>
            </div>
            <div className="space-y-1">
              <div>‚Ä¢ <strong>Accessibility:</strong> ARIA labels ‡πÅ‡∏•‡∏∞ keyboard navigation</div>
              <div>‚Ä¢ <strong>SEO:</strong> proper meta tags ‡πÅ‡∏•‡∏∞ semantic HTML</div>
              <div>‚Ä¢ <strong>Security:</strong> input sanitization ‡πÅ‡∏•‡∏∞ validation</div>
              <div>‚Ä¢ <strong>Testing:</strong> unit tests ‡πÅ‡∏•‡∏∞ integration tests</div>
            </div>
          </div>
        </div>
      </div>
    </QuestionLayout>
  )
}